#### CampSpotterBackend 1.0 ####This is the backend part of the CampSpotter project (final assignment for TechLabs web development track).This backend engine/API was developed completely in Django 4.0.1 + Django REST Framework 3.13.1 + Pillow running 9.0.1on Python 3.10.## INSTALLATION ##It is recommended to install the virtual environment at the same level of this file.Please install all the requirements present in the requirements.txt file.## PROJECT STRUCTURE ##1. GeneralThe project follows a typical Django project structure.Two applications are present:- camps: defines everything related to camp sites and their reviews- users: defines everything related to the users and the authentication functionalities2. ModelsCheck the models.py file in each app folder.Camp model (camps app):- title (string, max 200char)- image (image file)- main_body (string, max 3000char)- position_body (string, max 2000char)- latitude (float)- longitude (float)- created_on (datetime, automatically assigned)- slug (string, automatically generated)- author (foreign key, automatically assigned)Review model (camps app):- title (string, max 200char)- body (string, max 500char)- rating (integer from 1 to 5)- camp (foreign key, automatically assigned)- author (foreign key, automatically assigned)User model (user app):- username (string, max 200char)- image (image file)- email (string, email format verified)- first_name (string)- last_name (string)- password (string, encoded, serialized write only)- password2 (string, encoded, serialized write only)- slug (string, automatically generated)3. ViewsThe views have been built mostly class-based, when possible using generic Django concrete views, in order to have moreDRY code. Check the views.py file in each app folder.Usually two types of classes (which inherit from REST Framework view classes) are used:- for listing (all users) and creating (all or only authenticated users) objects- for details retrieving (all users), editing and deleting objects (all or only owner users)4. SerializersOne serializer is defined for Camp, one for Review and two for User (one for retrieving and one for updatingand creating). Check the serializers.py file in each app folder.Camp serializer (camps app):- Serializes everything in the model- Serializes also the rating field which is calculated from the camp's reviews (read only)Review serializer (camps app):- Serializes everything in the modelUser serializer (users app):Serializes:- id (read only)- username- password (write only)- password2 (write only)- image- email- first_name- last_name- slug (read only)5. URLs/EndpointsCheck the _project/urls.py file.The uploaded files are stored in the folder media/images.The API has the following endpoints:"users/":    GET: retrieve user list    POST: add new user, input fields [username, image, password, password2, email, first_name, last_name]"users/{user_slug}/":    GET: retrieve user details    PUT: edit user, only with token, only owner, input fields [username(only for identifying the user), image(can be blank), password(can be blank), password2(can be blank), email, first_name(can be blank), last_name(can be blank)]    DELETE: delete user, only with token, only owner"users/{user_slug}/camps/":    GET: retrieve camp list of which the user is author"token/":    POST: generate and/or retrieve token, input fields [username, password]    DELETE: delete the token from the database"identity/":    POST: retrieve current (token-identified) user identity, only with token"camps/":    GET: retrieve camp list    POST: add new camp, only with token, input fields [title, image, main_body, position_body, latitude, longitude]"camps/{camp_slug}/":    GET: retrieve camp details    PUT: edit camp, only with token, only owner, input fields [title, image, main_body, position_body, latitude, longitude]    DELETE: delete camp, only with token, only owner"camps/{camp_slug}/reviews/":    GET: retrieve reviews list    POST: add new review, only with token, input fields [title, body, rating]"camps/{camp_slug}/reviews/{review_id}/":    DELETE: delete review, only with token, only ownerThe naming of the folders follows common Django project rules beside of the fact that the name of the folder containingsettings.py etc, has been changed to _project in order not to be confused with the root folder.## LAUNCHING THE BACKEND/API ##From the root folder, the one where manage.py is located execute the following:python3 manage.py runserverIn case of missing/broken migrations or sqlite file, migrations need to be recreated:python3 manage.py makemigrationspython3 manage.py migrateAlso if the superuser should be recreated in order to access the /admin/ page:python3 manage.py createsuperuserThe endpoints can also be accessed in a user-friendly way in a normal browser such as Google Chrome.########################################################################################################################This backend engine/API was developed for educational and entertainment purposes.��Copyright Nikita Volkov 2021